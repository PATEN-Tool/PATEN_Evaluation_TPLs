diff --git a/README.md b/README.md
index 8560aeca..5205d3b2 100644
--- a/README.md
+++ b/README.md
@@ -36,7 +36,13 @@ See [CONTRIBUTING.md](./CONTRIBUTING.md) for an overview of the development proc
 
 ### Integration Tests
 
-TBD: open sourcing the compliance test suite is a work-in-progress.
+Assuming a node with [rabbitmq-jms-topic-exchange](https://github.com/rabbitmq/rabbitmq-jms-topic-exchange/) is running on localhost
+with all defaults:
+
+    mvn clean verify
+
+The easiest way to run a test node is to clone
+[rabbitmq-jms-topic-exchange](https://github.com/rabbitmq/rabbitmq-jms-topic-exchange/) and use `make run-broker`.
 
 
 ## License and Copyright
diff --git a/src/main/java/com/rabbitmq/jms/admin/RMQConnectionFactory.java b/src/main/java/com/rabbitmq/jms/admin/RMQConnectionFactory.java
index 2d5bc95f..20b69c50 100644
--- a/src/main/java/com/rabbitmq/jms/admin/RMQConnectionFactory.java
+++ b/src/main/java/com/rabbitmq/jms/admin/RMQConnectionFactory.java
@@ -7,6 +7,7 @@ import static com.rabbitmq.jms.util.UriCodec.encUserinfo;
 
 import java.io.IOException;
 import java.io.Serializable;
+import java.util.List;
 import java.util.concurrent.TimeoutException;
 
 import javax.jms.Connection;
@@ -23,6 +24,7 @@ import javax.naming.Referenceable;
 import javax.naming.StringRefAddr;
 import javax.net.ssl.SSLException;
 
+import com.rabbitmq.jms.util.WhiteListObjectInputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -64,6 +66,13 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
     /** The time to wait for threads/messages to terminate during {@link Connection#close()} */
     private volatile long terminationTimeout = Long.getLong("rabbit.jms.terminationTimeout", 15000);
 
+    /**
+     * Classes in these packages can be transferred via ObjectMessage.
+     *
+     * @see WhiteListObjectInputStream
+     */
+    private List<String> trustedPackages = WhiteListObjectInputStream.DEFAULT_TRUSTED_PACKAGES;
+
     /**
      * {@inheritDoc}
      */
@@ -87,6 +96,7 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
         com.rabbitmq.client.Connection rabbitConnection = getRabbitConnection(factory);
 
         RMQConnection conn = new RMQConnection(rabbitConnection, getTerminationTimeout(), getQueueBrowserReadMax());
+        conn.setTrustedPackages(this.trustedPackages);
         logger.debug("Connection {} created.", conn);
         return conn;
     }
@@ -144,7 +154,7 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
     /**
      * Set connection factory parameters by URI String.
      * @param uriString URI to use for instantiated connection
-     * @throws JMSException
+     * @throws JMSException if connection URI is invalid
      */
     public void setUri(String uriString) throws JMSException {
         logger.trace("Set connection factory parameters by URI '{}'", uriString);
@@ -160,7 +170,14 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
         this.virtualHost = factory.getVirtualHost();
     }
 
-    private static final void setRabbitUri(Logger logger, RMQConnectionFactory rmqFactory, com.rabbitmq.client.ConnectionFactory factory, String uriString) throws RMQJMSException {
+    /**
+     * @param value list of trusted package prefixes
+     */
+    public void setTrustedPackages(List<String> value) {
+        this.trustedPackages = value;
+    }
+
+    private static void setRabbitUri(Logger logger, RMQConnectionFactory rmqFactory, com.rabbitmq.client.ConnectionFactory factory, String uriString) throws RMQJMSException {
         if (uriString != null) { // we get the defaults if the uri is null
             try {
                 factory.setUri(uriString);
@@ -189,21 +206,21 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
         this.ssl = ssl;
     }
 
-    private static final String scheme(boolean isSsl) {
+    private static String scheme(boolean isSsl) {
         return (isSsl ? "amqps" : "amqp");
     }
 
-    private static final String uriUInfoEscape(String user, String pass) {
-        if (null==user) return null;
-        if (null==pass) return encUserinfo(user, "UTF-8");
+    private static String uriUInfoEscape(String user, String pass) {
+        if (null == user) return null;
+        if (null == pass) return encUserinfo(user, "UTF-8");
         return encUserinfo(user + ":" + pass, "UTF-8");
     }
 
-    private static final String uriHostEscape(String host) {
+    private static String uriHostEscape(String host) {
         return encHost(host, "UTF-8");
     }
 
-    private static final String uriVirtualHostEscape(String vHost) {
+    private static String uriVirtualHostEscape(String vHost) {
         return encSegment(vHost, "UTF-8");
     }
 
@@ -224,9 +241,9 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
      * @param propertyName - the name of the property
      * @param value - the value to store with the property
      */
-    private static final void addStringRefProperty(Reference ref,
-                                                   String propertyName,
-                                                   String value) {
+    private static void addStringRefProperty(Reference ref,
+                                             String propertyName,
+                                             String value) {
         if (value==null || propertyName==null) return;
         RefAddr ra = new StringRefAddr(propertyName, value);
         ref.add(ra);
@@ -238,10 +255,10 @@ public class RMQConnectionFactory implements ConnectionFactory, Referenceable, S
      * @param propertyName - the name of the property
      * @param value - the value to store with the property
      */
-    private static final void addIntegerRefProperty(Reference ref,
-                                                    String propertyName,
-                                                    Integer value) {
-        if (value==null || propertyName==null) return;
+    private static void addIntegerRefProperty(Reference ref,
+                                              String propertyName,
+                                              Integer value) {
+        if (value == null || propertyName == null) return;
         RefAddr ra = new StringRefAddr(propertyName, String.valueOf(value));
         ref.add(ra);
     }
diff --git a/src/main/java/com/rabbitmq/jms/client/RMQConnection.java b/src/main/java/com/rabbitmq/jms/client/RMQConnection.java
index 31d99d41..c60f9fc2 100644
--- a/src/main/java/com/rabbitmq/jms/client/RMQConnection.java
+++ b/src/main/java/com/rabbitmq/jms/client/RMQConnection.java
@@ -27,6 +27,7 @@ import javax.jms.Topic;
 import javax.jms.TopicConnection;
 import javax.jms.TopicSession;
 
+import com.rabbitmq.jms.util.WhiteListObjectInputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -77,6 +78,13 @@ public class RMQConnection implements Connection, QueueConnection, TopicConnecti
     /** This is used for JMSCTS test cases, as ClientID should only be configurable right after the connection has been created */
     private volatile boolean canSetClientID = true;
 
+    /**
+     * Classes in these packages can be transferred via ObjectMessage.
+     *
+     * @see WhiteListObjectInputStream
+     */
+    private List<String> trustedPackages = WhiteListObjectInputStream.DEFAULT_TRUSTED_PACKAGES;
+
     /**
      * Creates an RMQConnection object.
      * @param rabbitConnection the TCP connection wrapper to the RabbitMQ broker
@@ -113,6 +121,7 @@ public class RMQConnection implements Connection, QueueConnection, TopicConnecti
         illegalStateExceptionIfClosed();
         freezeClientID();
         RMQSession session = new RMQSession(this, transacted, acknowledgeMode, this.subscriptions);
+        session.setTrustedPackages(this.trustedPackages);
         this.sessions.add(session);
         return session;
     }
@@ -154,6 +163,19 @@ public class RMQConnection implements Connection, QueueConnection, TopicConnecti
 
     }
 
+    public List<String> getTrustedPackages() {
+        return trustedPackages;
+    }
+
+    /**
+     * @param value list of trusted package prefixes
+     *
+     * @see com.rabbitmq.jms.admin.RMQConnectionFactory#setTrustedPackages(List)
+     */
+    public void setTrustedPackages(List<String> value) {
+        this.trustedPackages = value;
+    }
+
     /**
      * {@inheritDoc}
      */