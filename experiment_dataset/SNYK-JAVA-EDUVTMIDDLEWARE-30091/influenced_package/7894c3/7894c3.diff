diff --git a/pom.xml b/pom.xml
index f928eeb..6b535f7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -6,7 +6,7 @@
   <groupId>edu.vt.middleware</groupId>
   <artifactId>vt-ldap</artifactId>
   <packaging>jar</packaging>
-  <version>3.3.7</version>
+  <version>3.3.8</version>
   <name>VT LDAP Libraries</name>
   <description>Library for performing common LDAP operations</description>
   <url>http://code.google.com/p/vt-middleware/wiki/vtldap</url>
diff --git a/src/main/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifier.java b/src/main/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifier.java
index a2f67ea..18e22e6 100644
--- a/src/main/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifier.java
+++ b/src/main/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifier.java
@@ -20,7 +20,12 @@
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.List;
-import java.util.StringTokenizer;
+import javax.naming.NamingEnumeration;
+import javax.naming.NamingException;
+import javax.naming.directory.Attribute;
+import javax.naming.directory.Attributes;
+import javax.naming.ldap.LdapName;
+import javax.naming.ldap.Rdn;
 import javax.net.SocketFactory;
 import javax.net.ssl.HostnameVerifier;
 import javax.net.ssl.SSLPeerUnverifiedException;
@@ -214,9 +219,11 @@ protected boolean verifyDNS(final String hostname, final X509Certificate cert)
         this.logger.debug("verifyDNS using CN = " + Arrays.toString(cns));
       }
       if (cns.length > 0) {
-        if (isMatch(hostname, cns[0])) {
+        // the most specific CN refers to the last CN
+        if (isMatch(hostname, cns[cns.length - 1])) {
           if (this.logger.isDebugEnabled()) {
-            this.logger.debug("verifyDNS found hostname match: " + cns[0]);
+            this.logger.debug(
+              "verifyDNS found hostname match: " + cns[cns.length - 1]);
           }
           verified = true;
         }
@@ -269,15 +276,39 @@ private String[] getSubjectAltNames(
   private String[] getCNs(final X509Certificate cert)
   {
     final List<String> names = new ArrayList<String>();
-    // not a perfect implementation but appears to work for >99% of certificates
-    // and has the virtue of not requiring any dependencies
     final String subjectPrincipal = cert.getSubjectX500Principal().toString();
-    final StringTokenizer st = new StringTokenizer(subjectPrincipal, ",");
-    while (st.hasMoreTokens()) {
-      final String tok = st.nextToken();
-      final int x = tok.indexOf("CN=");
-      if (x >= 0) {
-        names.add(tok.substring(x + "CN=".length()));
+    if (subjectPrincipal != null) {
+      try {
+        final LdapName subjectDn = new LdapName(subjectPrincipal);
+        for (Rdn rdn : subjectDn.getRdns()) {
+          final Attributes attrs = rdn.toAttributes();
+          final NamingEnumeration<String> ids = attrs.getIDs();
+          while (ids.hasMore()) {
+            final String id = ids.next();
+            if (id.toLowerCase().equals("cn") ||
+                id.toLowerCase().equals("commonname") ||
+                id.toLowerCase().equals("2.5.4.3")) {
+              final Object value = attrs.get(id).get();
+              if (value != null) {
+                if (value instanceof String) {
+                  names.add((String) value);
+                } else if (value instanceof Attribute) {
+                  // for multi value RDNs the first value is used
+                  final Object multiValue = ((Attribute) value).get();
+                  if (multiValue != null && multiValue instanceof String) {
+                    names.add((String) multiValue);
+                  }
+                }
+              }
+            }
+          }
+        }
+      } catch (NamingException e) {
+        if (this.logger.isWarnEnabled()) {
+          this.logger.warn(
+            "Could not get distinguished name from subject " + subjectPrincipal,
+            e);
+        }
       }
     }
     return names.toArray(new String[names.size()]);
diff --git a/src/test/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifierTest.java b/src/test/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifierTest.java
index cb31aab..d9fd976 100644
--- a/src/test/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifierTest.java
+++ b/src/test/java/edu/vt/middleware/ldap/ssl/DefaultHostnameVerifierTest.java
@@ -217,6 +217,81 @@ public class DefaultHostnameVerifierTest
     "h65ugoRzPU690x6DkscPxSQKexEjEZG+z0QnsQgaig6SY3bX2kKMa48QywLp0/Vo" +
     "HddtVv0q6rQqonRHRuCyD+FuXUg0w7BVVRH9txYAsE5eciIc7z0=";
 
+  /**
+   * Certificate with CN=a.foo.com/CN=b.foo.com
+   */
+  private static final String A_FOO_COM_MV_CERT =
+    "MIIC2zCCAkSgAwIBAgIDAVJ9MA0GCSqGSIb3DQEBBQUAMFcxEzARBgoJkiaJk/Is" +
+      "ZAEZFgNvcmcxGDAWBgoJkiaJk/IsZAEZFghsZGFwdGl2ZTESMBAGA1UEAxMJYS5m" +
+      "b28uY29tMRIwEAYDVQQDEwliLmZvby5jb20wHhcNMTQwODI5MTk1MTE5WhcNMTQw" +
+      "OTI4MTk1MTE5WjBXMRMwEQYKCZImiZPyLGQBGRYDb3JnMRgwFgYKCZImiZPyLGQB" +
+      "GRYIbGRhcHRpdmUxEjAQBgNVBAMTCWEuZm9vLmNvbTESMBAGA1UEAxMJYi5mb28u" +
+      "Y29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCrFV0ARzYvBJLXMLo8yex7" +
+      "aNATrAANh4S3utE/ce+xj2qTi+hl9xm0EU6Zal+iYGpsKqnpTPfNE8HVMbzOrrPB" +
+      "6fRMGS1AyRV3WOy+2mgdzi1P068PqpTkm+MjXF6El8OBnuGaIwLzvFMno0rV7lse" +
+      "UOLDYcEIl3BdVsIlH27KpQIDAQABo4G0MIGxMB0GA1UdDgQWBBSHRs4AN3PGdL/i" +
+      "OkPq/Cjjc6f8EDCBgQYDVR0jBHoweIAUh0bOADdzxnS/4jpD6vwo43On/BChW6RZ" +
+      "MFcxEzARBgoJkiaJk/IsZAEZFgNvcmcxGDAWBgoJkiaJk/IsZAEZFghsZGFwdGl2" +
+      "ZTESMBAGA1UEAxMJYS5mb28uY29tMRIwEAYDVQQDEwliLmZvby5jb22CAwFSfTAM" +
+      "BgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAC++ms/hrIOiY4Gdyie8qiIW" +
+      "FAU/IZLkbFSPwFpVQrYLdN7m+xCIcq2+viaZdXG6QYOC8dYr2URoEoVm+DPfx2Hj" +
+      "TokXEIsNS7ODx8r/sBmJ2UHvRdPROtqwY4tCgYlf7LWD/s27eRVYCTZbcwMF1hBf" +
+      "aNe1VTBZ5MLkzyewZ6tW";
+
+  /**
+   * Certificate with CN=a.foo.com+b.foo.com
+   */
+  private static final String A_FOO_COM_MV_RDN_CERT =
+    "MIIC1DCCAj2gAwIBAgIDAVJ9MA0GCSqGSIb3DQEBBQUAMFUxJDAQBgNVBAMTCWEu" +
+      "Zm9vLmNvbTAQBgNVBAMTCWIuZm9vLmNvbTEYMBYGCgmSJomT8ixkARkWCGxkYXB0" +
+      "aXZlMRMwEQYKCZImiZPyLGQBGRYDb3JnMB4XDTE0MDgyOTE5MjY1OVoXDTE0MDky" +
+      "ODE5MjY1OVowVTEkMBAGA1UEAxMJYS5mb28uY29tMBAGA1UEAxMJYi5mb28uY29t" +
+      "MRgwFgYKCZImiZPyLGQBGRYIbGRhcHRpdmUxEzARBgoJkiaJk/IsZAEZFgNvcmcw" +
+      "gZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAOC2KBN8MDiKHWEuv1pnIEcWYjHb" +
+      "D+NgAGVnZh7i8jEDRIVpWUzFj7FxNROEsAitZAanzpwo6jYeGmT60Vl4DpliuoVu" +
+      "Vt1Reem96Dp9/J7BL0QBv0fJErv/YRhNor4wSOuWI96TWHvCDEL4oDNuxEK46Nsn" +
+      "dAw10DFBRMWt1VcFAgMBAAGjgbEwga4wHQYDVR0OBBYEFB7EPqv9y/GqxBrJAMS4" +
+      "pEh2ktyTMH8GA1UdIwR4MHaAFB7EPqv9y/GqxBrJAMS4pEh2ktyToVmkVzBVMSQw" +
+      "EAYDVQQDEwlhLmZvby5jb20wEAYDVQQDEwliLmZvby5jb20xGDAWBgoJkiaJk/Is" +
+      "ZAEZFghsZGFwdGl2ZTETMBEGCgmSJomT8ixkARkWA29yZ4IDAVJ9MAwGA1UdEwQF" +
+      "MAMBAf8wDQYJKoZIhvcNAQEFBQADgYEALU4SluqREjvyztZDZRsVnKn0Wy5kQqh3" +
+      "wVN/U2Sv82+N6ulzqOttmEY/dq8UGH5QbIioGUTgWxycidYwzWCIT/+Gg+pwBcmz" +
+      "oTYxJY0aUKfvfy4p25dcaG360DMycUpmZHM+HpgEGOrMsLCewKshuR+D03pE9eH5" +
+      "AK1FbieXQtM=";
+
+  /** Certificate with /CN=a.foo.com/O=foo, CN=b.embed.com,/. */
+  private static final String END_B_EMBED_COM_CERT =
+    "MIICbjCCAdegAwIBAgIDAVJ9MA0GCSqGSIb3DQEBBQUAMDMxEjAQBgNVBAMTCWEu" +
+    "Zm9vLmNvbTEdMBsGA1UEChMUZm9vLCBDTj1iLmVtYmVkLmNvbSwwHhcNMTQwODIw" +
+    "MDQ1MDQ3WhcNMTQwOTE5MDQ1MDQ3WjAzMRIwEAYDVQQDEwlhLmZvby5jb20xHTAb" +
+    "BgNVBAoTFGZvbywgQ049Yi5lbWJlZC5jb20sMIGfMA0GCSqGSIb3DQEBAQUAA4GN" +
+    "ADCBiQKBgQCmODoBNwHc/1lReh98PU0Cwc9VWewd/Z7Ieoy48ScunJj+85XDtzYZ" +
+    "xv14kBuRGY1dDA282b3cQE5Q4AHen9rmmAAPQqU4jTPCcr51XyMzEdVn3AL4DYMb" +
+    "t7MkH09UikI+9KRrJLdRuLDX4UKfs1q1HBFuI5xETH2K9/Ck5aVghwIDAQABo4GP" +
+    "MIGMMB0GA1UdDgQWBBQhSWjpzcpwrouaTb+xrnzhP/o/ZDBdBgNVHSMEVjBUgBQh" +
+    "SWjpzcpwrouaTb+xrnzhP/o/ZKE3pDUwMzESMBAGA1UEAxMJYS5mb28uY29tMR0w" +
+    "GwYDVQQKExRmb28sIENOPWIuZW1iZWQuY29tLIIDAVJ9MAwGA1UdEwQFMAMBAf8w" +
+    "DQYJKoZIhvcNAQEFBQADgYEAgehg1PgzUh4uxz2k/8aSM4aizRqp5o9g9uuUn6BI" +
+    "swNWWa7BsF2G/NDdIj0cB34n8nYHlAn24UuIxZHAkT7L79hlkkGX/sal8ttga/8g" +
+    "Rr56cBlZoR8lbD+fLMJx1EmMRYOLVq9I7o+QkwuCyyBFaxQB2JGx1GeZTp0d14zO" +
+    "3UM=";
+
+  /** Certificate with /CN=a.foo.com/O=CN=b.embed.com, foo/. */
+  private static final String BEGIN_B_EMBED_COM_CERT =
+    "MIICazCCAdSgAwIBAgIDAVJ9MA0GCSqGSIb3DQEBBQUAMDIxEjAQBgNVBAMTCWEu" +
+    "Zm9vLmNvbTEcMBoGA1UEChMTQ049Yi5lbWJlZC5jb20sIGZvbzAeFw0xNDA4MjAw" +
+    "NDUzNDJaFw0xNDA5MTkwNDUzNDJaMDIxEjAQBgNVBAMTCWEuZm9vLmNvbTEcMBoG" +
+    "A1UEChMTQ049Yi5lbWJlZC5jb20sIGZvbzCBnzANBgkqhkiG9w0BAQEFAAOBjQAw" +
+    "gYkCgYEA2oe29WdBaLWlYxKw8Hk8Gws19g5OpB+GG8yyef+P490iAg+M3n4+tXbd" +
+    "Jls9zTg6t5/8dAY6lfDCZBjdz9wCaJwE4g8YQr159iPAPOw1He1F6kHWcS3HUbfX" +
+    "Yzzv2G9gg0Ect3cFx3A+fFCrQTNumoHIE6dCO3E7DiEGnaVFVOECAwEAAaOBjjCB" +
+    "izAdBgNVHQ4EFgQUOeHQsTmcK1EGC5FMf+MPRVNWapcwXAYDVR0jBFUwU4AUOeHQ" +
+    "sTmcK1EGC5FMf+MPRVNWapehNqQ0MDIxEjAQBgNVBAMTCWEuZm9vLmNvbTEcMBoG" +
+    "A1UEChMTQ049Yi5lbWJlZC5jb20sIGZvb4IDAVJ9MAwGA1UdEwQFMAMBAf8wDQYJ" +
+    "KoZIhvcNAQEFBQADgYEAideRQI+/vGYAV4pP3vwB22mLwopN8Q7sKiH34l+Jt8ib" +
+    "UG9/HiI6nf2kizoqxK3yTWzQ7UpjsOI4pvNpXQ01IXcz9pdpUQOVCp60oEmWyie0" +
+    "qTSGaeM8OdLLJQeV9UZTZt7e/gnF+FHmrYcNKyM518IbJY+Pth87bJeFYcU7+MI=";
+
 
   /**
    * Certificate test data.
@@ -254,6 +329,20 @@ public Object[][] createCerts()
       (X509Certificate) cf.generateCertificate(
         new ByteArrayInputStream(
           LdapUtil.base64Decode(LOCALHOST_ALTNAME_CERT)));
+    final X509Certificate aFooComMvCert = (X509Certificate)
+      cf.generateCertificate(
+        new ByteArrayInputStream(LdapUtil.base64Decode(A_FOO_COM_MV_CERT)));
+    final X509Certificate aFooComMvRdnCert = (X509Certificate)
+      cf.generateCertificate(
+        new ByteArrayInputStream(LdapUtil.base64Decode(A_FOO_COM_MV_RDN_CERT)));
+    final X509Certificate endBEmbedComCert = (X509Certificate)
+      cf.generateCertificate(
+        new ByteArrayInputStream(
+          LdapUtil.base64Decode(END_B_EMBED_COM_CERT)));
+    final X509Certificate beginBEmbedComCert = (X509Certificate)
+      cf.generateCertificate(
+        new ByteArrayInputStream(
+          LdapUtil.base64Decode(BEGIN_B_EMBED_COM_CERT)));
 
     return new Object[][] {
       /* a.foo.com == CN=a.foo.com */
@@ -320,6 +409,38 @@ public Object[][] createCerts()
       new Object[] {
         "127.0.0.1", localhostAltNameCert, true,
       },
+      /* a.foo.com != CN=a.foo.com/CN=b.foo.com */
+      new Object[] {
+        "a.foo.com", aFooComMvCert, false,
+      },
+      /* b.foo.com == CN=a.foo.com/CN=b.foo.com */
+      new Object[] {
+        "b.foo.com", aFooComMvCert, true,
+      },
+      /* a.foo.com == CN=a.foo.com+CN=b.foo.com */
+      new Object[] {
+        "a.foo.com", aFooComMvRdnCert, true,
+      },
+      /* b.foo.com != CN=a.foo.com+CN=b.foo.com */
+      new Object[] {
+        "b.foo.com", aFooComMvRdnCert, false,
+      },
+      /* a.foo.com == CN=a.foo.com */
+      new Object[] {
+        "a.foo.com", endBEmbedComCert, true
+      },
+      /* a.foo.com != CN=b.embed.com */
+      new Object[] {
+        "b.embed.com", endBEmbedComCert, false
+      },
+      /* a.foo.com == CN=a.foo.com */
+      new Object[] {
+        "a.foo.com", beginBEmbedComCert, true
+      },
+      /* a.foo.com != CN=b.embed.com */
+      new Object[] {
+        "b.embed.com", beginBEmbedComCert, false
+      },
     };
   }
 
@@ -332,13 +453,26 @@ public Object[][] createCerts()
    * @throws  Exception  On test failure.
    */
   @Test(groups = {"ssl"}, dataProvider = "certificates")
-  public void verify(
+  public void verifyDefault(
+    final String hostname, final X509Certificate cert, final boolean pass)
+    throws Exception
+  {
+    Assert.assertEquals(DEFAULT_VERIFIER.verify(hostname, cert), pass);
+  }
+
+
+  /**
+   * @param  hostname  to match against the cert
+   * @param  cert  to extract hostname from
+   * @param  pass  whether the verify should succeed
+   *
+   * @throws  Exception  On test failure.
+   */
+  @Test(groups = {"ssl"}, dataProvider = "certificates")
+  public void verifySun(
     final String hostname, final X509Certificate cert, final boolean pass)
     throws Exception
   {
-    final boolean defaultResult = DEFAULT_VERIFIER.verify(hostname, cert);
-    final boolean sunResult = SUN_VERIFIER.verify(hostname, cert);
-    Assert.assertEquals(defaultResult, sunResult);
-    Assert.assertEquals(defaultResult, pass);
+    Assert.assertEquals(SUN_VERIFIER.verify(hostname, cert), pass);
   }
 }