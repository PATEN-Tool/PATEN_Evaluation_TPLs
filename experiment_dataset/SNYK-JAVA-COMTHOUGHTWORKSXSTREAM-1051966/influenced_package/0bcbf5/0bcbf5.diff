diff --git a/pom.xml b/pom.xml
index b39f4f6f2..3d3a9a471 100644
--- a/pom.xml
+++ b/pom.xml
@@ -635,6 +635,11 @@
         <artifactId>jaxb-api</artifactId>
         <version>${version.javax.xml.bind.api}</version>
       </dependency>
+      <dependency>
+        <groupId>com.sun.xml.ws</groupId>
+        <artifactId>jaxws-rt</artifactId>
+        <version>${version.javax.xml.ws.jaxws.rt}</version>
+      </dependency>
 
       <dependency>
         <groupId>org.hibernate</groupId>
@@ -1142,6 +1147,7 @@
     <version.javax.annotation.api>1.3.2</version.javax.annotation.api>
     <version.javax.inject>2.4.0</version.javax.inject>
     <version.javax.xml.bind.api>2.3.1</version.javax.xml.bind.api>
+    <version.javax.xml.ws.jaxws.rt>2.2</version.javax.xml.ws.jaxws.rt><!-- Java 5 -->
     <version.jmock>1.0.1</version.jmock>
     <version.joda-time>1.6</version.joda-time>
     <version.junit>3.8.1</version.junit>
@@ -1155,7 +1161,7 @@
     <version.org.jdom2>2.0.5</version.org.jdom2>
     <version.org.json>20080701</version.org.json>
     <version.org.openjdk.jmh>1.21</version.org.openjdk.jmh>
-    <version.org.ops4j.pax.exam>3.5.0</version.org.ops4j.pax.exam><!--  java 6 -->
+    <version.org.ops4j.pax.exam>3.5.0</version.org.ops4j.pax.exam><!-- Java 6 -->
     <version.org.slf4j>1.6.1</version.org.slf4j>
     <version.stax>1.2.0</version.stax>
     <version.stax.api>1.0.1</version.stax.api>
diff --git a/xstream-distribution/src/content/CVE-2020-26259.html b/xstream-distribution/src/content/CVE-2020-26259.html
new file mode 100644
index 000000000..a3365901e
--- /dev/null
+++ b/xstream-distribution/src/content/CVE-2020-26259.html
@@ -0,0 +1,118 @@
+<html>
+<!--
+ Copyright (C) 2020 XStream committers.
+ All rights reserved.
+
+ The software in this package is published under the terms of the BSD
+ style license a copy of which has been included with this distribution in
+ the LICENSE.txt file.
+
+ Created on 06. December 2020 by Joerg Schaible
+ -->
+  <head>
+    <title>CVE-2020-26259</title>
+  </head>
+  <body>
+
+    <h2 id="vulnerability">Vulnerability</h2>
+
+    <p>CVE-2020-26259: XStream is vulnerable to an Arbitrary File Deletion on the local host when unmarshalling as long
+    as the executing process has sufficient rights.</p>
+
+    <h2 id="affected_versions">Affected Versions</h2>
+
+	<p>All versions until and including version 1.4.14 are affected running in a Java environment containing the JAX-WS
+	runtime, if using the version out of the box.  No user is affected, who followed the recommendation to setup
+	<a href="security.html#framework">XStream's security framework</a> with a whitelist.</p>
+
+    <h2 id="description">Description</h2>
+
+    <p>The processed stream at unmarshalling time contains type information to recreate the formerly written objects.
+    XStream creates therefore new instances based on these type information.  An attacker can manipulate the processed
+    input stream and replace or inject objects, that result in a server-side forgery request.</p>
+
+    <h2 id="reproduction">Steps to Reproduce</h2>
+
+	<p>Create a simple HashMap and use XStream to marshal it to XML. Replace the XML with following snippet and
+	unmarshal it again with XStream:</p>
+<div class="Source XML"><pre>&lt;map&gt;
+  &lt;entry&gt;
+    &lt;jdk.nashorn.internal.objects.NativeString&gt;
+      &lt;flags&gt;0&lt;/flags&gt;
+      &lt;value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'&gt;
+        &lt;dataHandler&gt;
+          &lt;dataSource class='com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource'&gt;
+            &lt;contentType&gt;text/plain&lt;/contentType&gt;
+            &lt;is class='com.sun.xml.internal.ws.util.ReadAllStream$FileStream'&gt;
+              &lt;tempFile&gt;/etc/hosts&lt;/tempFile&gt;
+            &lt;/is&gt;
+          &lt;/dataSource&gt;
+          &lt;transferFlavors/&gt;
+        &lt;/dataHandler&gt;
+        &lt;dataLen&gt;0&lt;/dataLen&gt;
+      &lt;/value&gt;
+    &lt;/jdk.nashorn.internal.objects.NativeString&gt;
+    &lt;string&gt;test&lt;/string&gt;
+  &lt;/entry&gt;
+&lt;/map&gt;
+</pre></div>
+<div class="Source Java"><pre>XStream xstream = new XStream();
+xstream.fromXML(xml);
+</pre></div>
+
+    <p>As soon as the XML gets unmarshalled, the payload gets executed and the references file is deleted.</p>
+
+    <p>Note, this example uses XML, but the attack can be performed for any supported format, e.g. JSON.</p>
+
+    <h2 id="impact">Impact</h2>
+
+	<p>The vulnerability may allow a remote attacker to delete arbitrary know files on the host as log as the executing
+	process has sufficient rights only by manipulating the processed input stream.</p>
+
+    <h2 id="workaround">Workaround</h2>
+    <p>As recommended, use XStream's security framework to implement a whitelist for the allowed types.</p>
+    <p>Users of XStream 1.4.14 who insist to use XStream default blacklist - despite that clear recommendation - can
+    simply add two lines to XStream's setup code:</p>
+<div class="Source Java"><pre>xstream.denyTypes(new String[]{ "jdk.nashorn.internal.objects.NativeString" });
+xstream.denyTypesByRegExp(new String[]{ ".*\\.ReadAllStream\\$FileStream" });
+</pre></div>
+    <p>Users of XStream 1.4.13 who want to use XStream default blacklist can simply add three lines to XStream's setup
+    code:</p>
+<div class="Source Java"><pre>xstream.denyTypes(new String[]{ "javax.imageio.ImageIO$ContainsFilter", "jdk.nashorn.internal.objects.NativeString" });
+xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
+xstream.denyTypesByRegExp(new String[]{ ".*\\.ReadAllStream\\$FileStream" });
+</pre></div>
+    <p>Users of XStream 1.4.12 to 1.4.7 who want to use XStream with a blacklist will have to setup such a list from
+    scratch and deny at least the following types: <em>javax.imageio.ImageIO$ContainsFilter</em>,
+    <em>java.beans.EventHandler</em>, <em>java.lang.ProcessBuilder</em>, <em>jdk.nashorn.internal.objects.NativeString</em>,
+    <em>java.lang.Void</em> and <em>void</em> and deny several types by name pattern.</p>
+<div class="Source Java"><pre>xstream.denyTypes(new String[]{ "javax.imageio.ImageIO$ContainsFilter", "jdk.nashorn.internal.objects.NativeString" });
+xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });
+xstream.denyTypesByRegExp(new String[]{ ".*\\$LazyIterator", "javax\\.crypto\\..*", ".*\\.ReadAllStream\\$FileStream" });
+</pre></div>
+	<p>Users of XStream 1.4.6 or below can register an own converter to prevent the unmarshalling of the currently
+	know critical types of the Java runtime. It is in fact an updated version of the workaround for CVE-2013-7285:</p>
+<div class="Source Java"><pre>xstream.registerConverter(new Converter() {
+  public boolean canConvert(Class type) {
+    return type != null &amp;&amp; (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class
+        || type.getName().equals("javax.imageio.ImageIO$ContainsFilter") || type.getName().equals("jdk.nashorn.internal.objects.NativeString")
+        || type == java.lang.Void.class || void.class || Proxy.isProxy(type)
+        || type.getName().startsWith("javax.crypto.") || type.getName().endsWith("$LazyIterator") || type.getName().endsWith(".ReadAllStream$FileStream"));
+  }
+
+  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
+    throw new ConversionException("Unsupported type due to security reasons.");
+  }
+
+  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
+    throw new ConversionException("Unsupported type due to security reasons.");
+  }
+}, XStream.PRIORITY_LOW);
+</pre></div>
+
+    <h2 id="credits">Credits</h2>
+
+    <p>钟潦贵 (Liaogui Zhong) found and reported the issue to XStream and provided the required information to reproduce it.</p>
+
+    </body>
+ </html>
\ No newline at end of file
diff --git a/xstream-distribution/src/content/changes.html b/xstream-distribution/src/content/changes.html
index 7ab6e50ab..9e2d0364f 100644
--- a/xstream-distribution/src/content/changes.html
+++ b/xstream-distribution/src/content/changes.html
@@ -32,9 +32,9 @@ <h1 id="upcoming-1.4.x">Upcoming 1.4.x maintenance release</h1>
 
 	<p>Not yet released.</p>
 
-	<p class="highlight">This maintenance release addresses the security vulnerability
-	<a href="CVE-2020-26258.html">CVE-2020-26258</a>, when unmarshalling for XStream instances with uninitialized security
-	framework in a Java runtime below Java 15.</p>
+	<p class="highlight">This maintenance release addresses the security vulnerabilities
+	<a href="CVE-2020-26258.html">CVE-2020-26258</a> and <a href="CVE-2020-26259.html">CVE-2020-26259</a>, when
+	unmarshalling for XStream instances with uninitialized security framework.</p>
 	<h2>Minor changes</h2>
 
 	<ul>
@@ -44,9 +44,9 @@ <h2>Minor changes</h2>
 	<h2>Stream compatibility</h2>
 
 	<ul>
-		<li>The type jdk.nashorn.internal.objects.NativeString id now part of the default blacklist and the
-		deserialization of XML containing one of the two types will fail. You will must enable these types by
-		explicit configuration, if you need them.</li>
+		<li>The type jdk.nashorn.internal.objects.NativeString and the internal JAX-WS type ReadAllStream.FileStream
+		are now	part of the default blacklist and the deserialization of XML containing one of the two types will fail.
+		You will have to enable these types by explicit configuration, if you need them.</li>
 	</ul>
 
 	<h2>Delivery</h2>
@@ -77,8 +77,8 @@ <h2>Stream compatibility</h2>
 
 	<ul>
 		<li>The types java.lang.ProcessBuilder and javax.imageio.ImageIO$ContainsFilter are now part of the default
-		blacklist and the deserialization of XML containing one of the two types will fail. You will must enable these
-		types by explicit configuration, if you need them.</li>
+		blacklist and the deserialization of XML containing one of the two types will fail. You will have to enable
+		these types by explicit configuration, if you need them.</li>
 	</ul>
 
 	<h1 id="1.4.13">1.4.13</h1>
diff --git a/xstream-distribution/src/content/security.html b/xstream-distribution/src/content/security.html
index 7614d3832..88b55fb03 100644
--- a/xstream-distribution/src/content/security.html
+++ b/xstream-distribution/src/content/security.html
@@ -29,9 +29,10 @@
   
 	<p>The provided XML data is used by XStream to unmarshal Java objects.  This data can be manipulated by injecting
 	the XML representation of other objects, that were not present at marshalling time.  An attacker could take
-	advantage of this to access private data, execute arbitrary code or shell commands in the context of the server
-	running the XStream process.  Concrete cases are described in <a href="CVE-2013-7285.html">CVE-2013-7285</a>,
-	<a href="CVE-2020-26217.html">CVE-2020-26217</a>, and <a href="CVE-2020-26258.html">CVE-2020-26258</a>.</p>
+	advantage of this to access private data, delete local files, execute arbitrary code or shell commands in the
+	context of the server running the XStream process.  Concrete cases are described in
+	<a href="CVE-2013-7285.html">CVE-2013-7285</a>, <a href="CVE-2020-26217.html">CVE-2020-26217</a>,
+	<a href="CVE-2020-26258.html">CVE-2020-26258</a>, and <a href="CVE-2020-26259.html">CVE-2020-26259</a>.</p>
  
 	<p>Note, that the XML data can be manipulated on different levels.  For example, manipulating values on existing
  	objects (such as a price value), accessing private data, or breaking the format and causing the XML parser to fail.
diff --git a/xstream-distribution/src/content/website.xml b/xstream-distribution/src/content/website.xml
index 8c9bd3f88..c01aa0604 100644
--- a/xstream-distribution/src/content/website.xml
+++ b/xstream-distribution/src/content/website.xml
@@ -45,6 +45,7 @@
     </section>
     <section>
         <name>Vulnerabilities</name>
+        <page>CVE-2020-26259.html</page>
         <page>CVE-2020-26258.html</page>
         <page>CVE-2020-26217.html</page>
         <page>CVE-2017-7957.html</page>
diff --git a/xstream/pom.xml b/xstream/pom.xml
index 4dba7a0ad..389f52773 100644
--- a/xstream/pom.xml
+++ b/xstream/pom.xml
@@ -143,6 +143,54 @@
       <artifactId>commons-lang</artifactId>
       <scope>test</scope>
     </dependency>
+
+    <dependency>
+      <groupId>com.sun.xml.ws</groupId>
+      <artifactId>jaxws-rt</artifactId>
+      <scope>test</scope>
+      <exclusions>
+        <exclusion>
+          <groupId>javax.xml.ws</groupId>
+          <artifactId>jaxws-api</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.sun.istack</groupId>
+          <artifactId>istack-commons-runtime</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.sun.xml.bind</groupId>
+          <artifactId>jaxb-impl</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.sun.xml.messaging.saaj</groupId>
+          <artifactId>saaj-impl</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.sun.xml.stream.buffer</groupId>
+          <artifactId>streambuffer</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.sun.xml.ws</groupId>
+          <artifactId>policy</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>com.sun.org.apache.xml.internal</groupId>
+          <artifactId>resolver</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>org.glassfish.gmbal</groupId>
+          <artifactId>gmbal-api-only</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>org.jvnet</groupId>
+          <artifactId>mimepull</artifactId>
+        </exclusion>
+        <exclusion>
+          <groupId>org.jvnet.staxex</groupId>
+          <artifactId>stax-ex</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/xstream/src/java/com/thoughtworks/xstream/XStream.java b/xstream/src/java/com/thoughtworks/xstream/XStream.java
index a54b96886..8415da259 100644
--- a/xstream/src/java/com/thoughtworks/xstream/XStream.java
+++ b/xstream/src/java/com/thoughtworks/xstream/XStream.java
@@ -337,6 +337,7 @@ public class XStream {
     private static final Pattern IGNORE_ALL = Pattern.compile(".*");
     private static final Pattern LAZY_ITERATORS = Pattern.compile(".*\\$LazyIterator");
     private static final Pattern JAVAX_CRYPTO = Pattern.compile("javax\\.crypto\\..*");
+    private static final Pattern JAXWS_FILE_STREAM = Pattern.compile(".*\\.ReadAllStream\\$FileStream");
 
     /**
      * Constructs a default XStream.
@@ -646,8 +647,8 @@ protected void setupSecurity() {
             "java.beans.EventHandler", //
             "java.lang.ProcessBuilder", //
             "javax.imageio.ImageIO$ContainsFilter", //
-            "jdk.nashorn.internal.objects.NativeString"});
-        denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, JAVAX_CRYPTO});
+            "jdk.nashorn.internal.objects.NativeString" });
+        denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, JAVAX_CRYPTO, JAXWS_FILE_STREAM});
         allowTypeHierarchy(Exception.class);
         securityInitialized = false;
     }
diff --git a/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java b/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
index 848db0261..da5f861ef 100644
--- a/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
+++ b/xstream/src/test/com/thoughtworks/acceptance/SecurityVulnerabilityTest.java
@@ -11,6 +11,11 @@
 package com.thoughtworks.acceptance;
 
 import java.beans.EventHandler;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
 import java.util.Iterator;
 
 import com.thoughtworks.xstream.XStream;
@@ -213,4 +218,68 @@ public void testInstanceOfLazyIterator() {
             // OK
         }
     }
+
+    public void testCannotUseJaxwsInputStreamToDeleteFile() {
+        if (JVM.isVersion(5)) {
+            final String xml = ""
+                + "<is class='com.sun.xml.ws.util.ReadAllStream$FileStream'>\n"
+                + " <tempFile>target/junit/test.txt</tempFile>\n"
+                + "</is>";
+
+            xstream.aliasType("is", InputStream.class);
+            try {
+                xstream.fromXML(xml);
+                fail("Thrown " + ConversionException.class.getName() + " expected");
+            } catch (final ForbiddenClassException e) {
+                // OK
+            }
+        }
+    }
+
+    public void testExplicitlyUseJaxwsInputStreamToDeleteFile() throws IOException {
+        if (JVM.isVersion(5)) {
+            final File testDir = new File("target/junit");
+            final File testFile = new File(testDir, "test.txt");
+            try {
+                testDir.mkdirs();
+
+                final OutputStream out = new FileOutputStream(testFile);
+                out.write("JUnit".getBytes());
+                out.flush();
+                out.close();
+
+                assertTrue("Test file " + testFile.getPath() + " does not exist.", testFile.exists());
+
+                final String xml = ""
+                    + "<is class='com.sun.xml.ws.util.ReadAllStream$FileStream'>\n"
+                    + " <tempFile>target/junit/test.txt</tempFile>\n"
+                    + "</is>";
+
+                xstream.addPermission(AnyTypePermission.ANY); // clear out defaults
+                xstream.aliasType("is", InputStream.class);
+
+                InputStream is = null;
+                try {
+                    is = (InputStream)xstream.fromXML(xml);
+                } catch (final ForbiddenClassException e) {
+                    // OK
+                }
+
+                assertTrue("Test file " + testFile.getPath() + " no longer exists.", testFile.exists());
+
+                byte[] data = new byte[10];
+                is.read(data);
+                is.close();
+
+                assertFalse("Test file " + testFile.getPath() + " still exists exist.", testFile.exists());
+            } finally {
+                if (testFile.exists()) {
+                    testFile.delete();
+                }
+                if (testDir.exists()) {
+                    testDir.delete();
+                }
+            }
+        }
+    }
 }