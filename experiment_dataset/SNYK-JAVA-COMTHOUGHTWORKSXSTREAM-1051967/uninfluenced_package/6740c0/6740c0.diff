diff --git a/xstream-distribution/src/content/CVE-2020-26258.html b/xstream-distribution/src/content/CVE-2020-26258.html
new file mode 100644
index 000000000..61777c2e6
--- /dev/null
+++ b/xstream-distribution/src/content/CVE-2020-26258.html
@@ -0,0 +1,115 @@
+<html>
+<!--
+ Copyright (C) 2020 XStream committers.
+ All rights reserved.
+
+ The software in this package is published under the terms of the BSD
+ style license a copy of which has been included with this distribution in
+ the LICENSE.txt file.
+
+ Created on 24. November 2020 by Joerg Schaible
+ -->
+  <head>
+    <title>CVE-2020-26258</title>
+  </head>
+  <body>
+
+    <h2 id="vulnerability">Vulnerability</h2>
+
+    <p>CVE-2020-26258: A Server-Side Forgery Request can be activated unmarshalling with XStream to access data streams
+    from an arbitrary URL referencing a resource in an intranet or the local host.</p>
+
+    <h2 id="affected_versions">Affected Versions</h2>
+
+	<p>All versions until and including version 1.4.14 are affected running in a Java environment below Java 15, if
+	using the version out of the box.  No user is affected, who followed the recommendation to setup
+	<a href="security.html#framework">XStream's security framework</a> with a whitelist.</p>
+
+    <h2 id="description">Description</h2>
+
+    <p>The processed stream at unmarshalling time contains type information to recreate the formerly written objects.
+    XStream creates therefore new instances based on these type information.  An attacker can manipulate the processed
+    input stream and replace or inject objects, that result in a server-side forgery request.</p>
+
+    <h2 id="reproduction">Steps to Reproduce</h2>
+
+	<p>Create a simple HashMap and use XStream to marshal it to XML. Replace the XML with following snippet and
+	unmarshal it again with XStream:</p>
+<div class="Source XML"><pre>&lt;map&gt;
+  &lt;entry&gt;
+    &lt;jdk.nashorn.internal.objects.NativeString&gt;
+      &lt;flags&gt;0&lt;/flags&gt;
+      &lt;value class='com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data'&gt;
+        &lt;dataHandler&gt;
+          &lt;dataSource class='javax.activation.URLDataSource'&gt;
+            &lt;url&gt;http://localhost:8080/internal/:&lt;/url&gt;
+          &lt;/dataSource&gt;
+          &lt;transferFlavors/&gt;
+        &lt;/dataHandler&gt;
+        &lt;dataLen&gt;0&lt;/dataLen&gt;
+      &lt;/value&gt;
+    &lt;/jdk.nashorn.internal.objects.NativeString&gt;
+    &lt;string&gt;test&lt;/string&gt;
+  &lt;/entry&gt;
+&lt;/map&gt;
+</pre></div>
+<div class="Source Java"><pre>XStream xstream = new XStream();
+xstream.fromXML(xml);
+</pre></div>
+
+    <p>As soon as the XML gets unmarshalled, the payload gets executed and the data from the URL location is collected.</p>
+
+    <p>Note, this example uses XML, but the attack can be performed for any supported format, e.g. JSON.</p>
+
+    <h2 id="impact">Impact</h2>
+
+	<p>The vulnerability may allow a remote attacker to request data from internal resources that are not publicly
+	available only by manipulating the processed input stream.</p>
+
+    <h2 id="workaround">Workaround</h2>
+    <p>As recommended, use XStream's security framework to implement a whitelist for the allowed types.</p>
+    <p>Users of XStream 1.4.14 who insist to use XStream default blacklist - despite that clear recommendation - can
+    simply add two lines to XStream's setup code:</p>
+<div class="Source Java"><pre>xstream.denyTypes(new String[]{ "jdk.nashorn.internal.objects.NativeString" });
+xstream.denyTypesByRegExp(new String[]{ ".*\\.ReadAllStream\\$FileStream" });
+</pre></div>
+    <p>Users of XStream 1.4.13 who want to use XStream default blacklist can simply add three lines to XStream's setup
+    code:</p>
+<div class="Source Java"><pre>xstream.denyTypes(new String[]{ "javax.imageio.ImageIO$ContainsFilter", "jdk.nashorn.internal.objects.NativeString" });
+xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });
+xstream.denyTypesByRegExp(new String[]{ ".*\\.ReadAllStream\\$FileStream" });
+</pre></div>
+    <p>Users of XStream 1.4.12 to 1.4.7 who want to use XStream with a blacklist will have to setup such a list from
+    scratch and deny at least the following types: <em>javax.imageio.ImageIO$ContainsFilter</em>,
+    <em>java.beans.EventHandler</em>, <em>java.lang.ProcessBuilder</em>, <em>jdk.nashorn.internal.objects.NativeString</em>,
+    <em>java.lang.Void</em> and <em>void</em> and deny several types by name pattern.</p>
+<div class="Source Java"><pre>xstream.denyTypes(new String[]{ "javax.imageio.ImageIO$ContainsFilter", "jdk.nashorn.internal.objects.NativeString" });
+xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });
+xstream.denyTypesByRegExp(new String[]{ ".*\\$LazyIterator", "javax\\.crypto\\..*", ".*\\.ReadAllStream\\$FileStream" });
+</pre></div>
+	<p>Users of XStream 1.4.6 or below can register an own converter to prevent the unmarshalling of the currently
+	know critical types of the Java runtime. It is in fact an updated version of the workaround for CVE-2013-7285:</p>
+<div class="Source Java"><pre>xstream.registerConverter(new Converter() {
+  public boolean canConvert(Class type) {
+    return type != null &amp;&amp; (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class
+        || type.getName().equals("javax.imageio.ImageIO$ContainsFilter") || type.getName().equals("jdk.nashorn.internal.objects.NativeString")
+        || type == java.lang.Void.class || void.class || Proxy.isProxy(type)
+        || type.getName().startsWith("javax.crypto.") || type.getName().endsWith("$LazyIterator") || type.getName().endsWith(".ReadAllStream$FileStream"));
+  }
+
+  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {
+    throw new ConversionException("Unsupported type due to security reasons.");
+  }
+
+  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {
+    throw new ConversionException("Unsupported type due to security reasons.");
+  }
+}, XStream.PRIORITY_LOW);
+</pre></div>
+
+    <h2 id="credits">Credits</h2>
+
+    <p>钟潦贵 (Liaogui Zhong) found and reported the issue to XStream and provided the required information to reproduce it.</p>
+
+    </body>
+ </html>
\ No newline at end of file
diff --git a/xstream-distribution/src/content/changes.html b/xstream-distribution/src/content/changes.html
index bbeb7e3da..7ab6e50ab 100644
--- a/xstream-distribution/src/content/changes.html
+++ b/xstream-distribution/src/content/changes.html
@@ -32,12 +32,23 @@ <h1 id="upcoming-1.4.x">Upcoming 1.4.x maintenance release</h1>
 
 	<p>Not yet released.</p>
 
+	<p class="highlight">This maintenance release addresses the security vulnerability
+	<a href="CVE-2020-26258.html">CVE-2020-26258</a>, when unmarshalling for XStream instances with uninitialized security
+	framework in a Java runtime below Java 15.</p>
 	<h2>Minor changes</h2>
 
 	<ul>
 		<li>GHI:#226: XmlFriendlyNameCoder does not accept '9' as valid character in an XML name.</li>
 	</ul>
 
+	<h2>Stream compatibility</h2>
+
+	<ul>
+		<li>The type jdk.nashorn.internal.objects.NativeString id now part of the default blacklist and the
+		deserialization of XML containing one of the two types will fail. You will must enable these types by
+		explicit configuration, if you need them.</li>
+	</ul>
+
 	<h2>Delivery</h2>
 
 	<p>Any XStream release can run with a minimal Java runtime environment of Java 1.4 as long as this environment will
@@ -67,7 +78,7 @@ <h2>Stream compatibility</h2>
 	<ul>
 		<li>The types java.lang.ProcessBuilder and javax.imageio.ImageIO$ContainsFilter are now part of the default
 		blacklist and the deserialization of XML containing one of the two types will fail. You will must enable these
-		types by	explicit configuration, if you need them.</li>
+		types by explicit configuration, if you need them.</li>
 	</ul>
 
 	<h1 id="1.4.13">1.4.13</h1>
diff --git a/xstream-distribution/src/content/security.html b/xstream-distribution/src/content/security.html
index d316347e6..7614d3832 100644
--- a/xstream-distribution/src/content/security.html
+++ b/xstream-distribution/src/content/security.html
@@ -29,14 +29,14 @@
   
 	<p>The provided XML data is used by XStream to unmarshal Java objects.  This data can be manipulated by injecting
 	the XML representation of other objects, that were not present at marshalling time.  An attacker could take
-	advantage of this to execute arbitrary code or shell commands in the context of the server running the XStream
-	process.  A concrete case is described in <a href="CVE-2013-7285.html">CVE-2013-7285</a> and
-	<a href="CVE-2020-26217.html">CVE-2020-26217</a>.</p>
+	advantage of this to access private data, execute arbitrary code or shell commands in the context of the server
+	running the XStream process.  Concrete cases are described in <a href="CVE-2013-7285.html">CVE-2013-7285</a>,
+	<a href="CVE-2020-26217.html">CVE-2020-26217</a>, and <a href="CVE-2020-26258.html">CVE-2020-26258</a>.</p>
  
 	<p>Note, that the XML data can be manipulated on different levels.  For example, manipulating values on existing
- 	objects (such as a price value), or breaking the format and causing the XML parser to fail.  The latter case will
- 	raise an exception, but the former case must be handled by validity checks in any application which processes
-    user-supplied XML.  A worst case scenario is the injection of arbitrary code or shell commands, as noted above.
+ 	objects (such as a price value), accessing private data, or breaking the format and causing the XML parser to fail.
+ 	The latter case will raise an exception, but the former case must be handled by validity checks in any application
+ 	which processes user-supplied XML.  A worst case scenario is the injection of arbitrary code or shell commands, as noted above.
     Even worse, <a href="CVE-2017-7957.html">CVE-2017-7957</a> describes a case to crash the Java Virtual Machine
     causing a Denial of Service.</p>
      
diff --git a/xstream-distribution/src/content/website.xml b/xstream-distribution/src/content/website.xml
index 6491d0716..8c9bd3f88 100644
--- a/xstream-distribution/src/content/website.xml
+++ b/xstream-distribution/src/content/website.xml
@@ -1,6 +1,6 @@
 <!--
  Copyright (C) 2005, 2006 Joe Walnes.
- Copyright (C) 2006, 2007, 2010, 2011, 2014, 2015, 2016 XStream committers.
+ Copyright (C) 2006, 2007, 2010, 2011, 2014, 2015, 2016, 2017, 2020 XStream committers.
  All rights reserved.
  
  The software in this package is published under the terms of the BSD
@@ -45,6 +45,7 @@
     </section>
     <section>
         <name>Vulnerabilities</name>
+        <page>CVE-2020-26258.html</page>
         <page>CVE-2020-26217.html</page>
         <page>CVE-2017-7957.html</page>
         <page>CVE-2016-3674.html</page>
diff --git a/xstream/src/java/com/thoughtworks/xstream/XStream.java b/xstream/src/java/com/thoughtworks/xstream/XStream.java
index b6e4e147d..a54b96886 100644
--- a/xstream/src/java/com/thoughtworks/xstream/XStream.java
+++ b/xstream/src/java/com/thoughtworks/xstream/XStream.java
@@ -642,7 +642,11 @@ protected void setupSecurity() {
         }
 
         addPermission(AnyTypePermission.ANY);
-        denyTypes(new String[]{"java.beans.EventHandler", "java.lang.ProcessBuilder", "javax.imageio.ImageIO$ContainsFilter"});
+        denyTypes(new String[]{
+            "java.beans.EventHandler", //
+            "java.lang.ProcessBuilder", //
+            "javax.imageio.ImageIO$ContainsFilter", //
+            "jdk.nashorn.internal.objects.NativeString"});
         denyTypesByRegExp(new Pattern[]{LAZY_ITERATORS, JAVAX_CRYPTO});
         allowTypeHierarchy(Exception.class);
         securityInitialized = false;